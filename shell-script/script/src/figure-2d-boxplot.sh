# Concept profile generation and analysis for Gene-Disease paper
# Copyright (C) 2015 Biosemantics Group, Leiden University Medical Center
#  Leiden, The Netherlands
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

: '
@author	: Rajaram kaliyaperumal
@author	: Mark thompson
@author	: Eelke van der horst

@since	: 18-08-2014
@version: 0.1  	


<p>
  This shell script generate a csv file which is used as input by  
"https://git.lumc.nl/biosemantics/gene-disease/blob/master/r-script/script/src/figure-2d-boxPlot.R" rscript
</p>

Input Required : matchscores-with-cpLength file 
  See : Required input file is generated by "add_cp_length_to_matchscore_file" method of 
	"https://git.lumc.nl/biosemantics/gene-disease/blob/master/python-script/script/src/MatchscoreFileUtils.py" pythonScript

Output : figure-2d-input-file 


'
# variables
tmpFolder="../../output/test/tmpResults"
inputFileName="../../dataset/test/test-matchscores-with-cpLength" # input file
declare -i lines
declare -i tenPercentage
declare -i binSize=10
declare -i keyColumn=5 # column number of geneCPLenght or diseaseCPLength 

# create temporary folder
mkdir $tmpFolder

# sort file based on key column (the column entry should be digit)
sort -t$',' -k$keyColumn -g  $inputFileName > $tmpFolder/sortedFile

# change current working directory to temporary folder
cd $tmpFolder
echo "current path = "$(pwd)

# count number of lines in the sorted file
lines=$(wc -l sortedFile | cut -d' ' -f1)
tenPercentage=$lines/$binSize
echo "binSize = $binSize"
echo "lines = $lines"
echo "tenPercentage = $tenPercentage"

# divide sorted file based on the bin size 
declare -i startLine=0
for ((i=1; i<=binSize; i++));
do
   declare -i endLine=i*tenPercentage
   echo "currentLine =  $startLine endLine = $endLine"
   fileName="sorted_group_$i"
   $(awk "NR >$startLine && NR <= $endLine" sortedFile  | cut -d, -f3,3 > $fileName)
   startLine=endLine
done

# merge the files from the previous step
allSortFiles=""
groupedFileName="sorted_and_grouped"
for ((i=1; i<=binSize; i++));
do
   allSortFiles="$allSortFiles sorted_group_$i"
done

$(paste -d',' $allSortFiles > $groupedFileName)

# adding column name to the final output file
echo $'group1,group2,group3,group4,group5,group6,group7,group8,group9,group10' | cat - $groupedFileName > ../figure-2d-input-file
cd ..
$(rm -rf tmpResults)


