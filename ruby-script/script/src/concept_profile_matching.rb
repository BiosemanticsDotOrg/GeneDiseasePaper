# Concept profile generation and analysis for Gene-Disease paper
# Copyright (C) 2015 Biosemantics Group, Leiden University Medical Center
#  Leiden, The Netherlands
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

require 'rdf'
require 'logger'
require 'slop'
require_relative 'converter'


# Convert txt file generated by Concept Profile Matching texting mining method.
#
# Input file format:
#   concept1_id concept2_id match_score {in CSV}
class CPM_Nanopub_Converter < RDF_File_Converter
  
  
  # Define some useful RDF vocabularies.(Note: Define subclass RDF vocabularies here)   
  
  FOAF = RDF::FOAF
  DC = RDF::DC
  RDFS = RDF::RDFS
  XSD = RDF::XSD
  PROV = RDF::Vocabulary.new('http://www.w3.org/ns/prov#')
  OBO = RDF::Vocabulary.new('http://purl.org/obo/owl/obo#')
  PAV = RDF::Vocabulary.new('http://swan.mindinformatics.org/ontologies/1.2/pav/')   
  SIO = RDF::Vocabulary.new('http://semanticscience.org/resource/')
  STATO = RDF::Vocabulary.new('http://purl.obolibrary.org/obo/')
  PPA = RDF::Vocabulary.new('http://rdf.biosemantics.org/dataset/protein_protein_associations#')
  NP = RDF::Vocabulary.new('http://www.nanopub.org/nschema#')
  $base = RDF::Vocabulary.new($baseURI)

  def initialize
    
    # useful stuff for serializing graph.
    prefixes = {    
    :np => NP,
    :rdf => RDF,
    :sio => SIO,
    :stato => STATO,
    nil => $base
    }

    super(RDF, NP, prefixes)
    # for statistics
    @no_null_genes = 0
    @no_null_diseases = 0
    
    @previous_matchscore = nil
    # Used in match_score to percentile conversion formula
    @no_of_associations = (204072352).to_f 
    @percentile = nil
    $baseURI = ""
    $gdaResourceURI = "http://rdf.biosemantics.org/dataset/gene_disease_associations"
  end

  def convert_header_row(row)
    # do nothing
  end

  def convert_row(row)
    tokens = row.split(",")
    concept1_id = tokens[0]
    concept2_id = tokens[1]
    
    if concept2_id == 'null'
      @logger.info("row #{@row_index.to_s} has no disease id. skipped.")
      @no_null_diseases += 1
      return
    end

    if concept1_id == 'null'
      @logger.info("row #{@row_index.to_s} has no omim id. skipped.")
      @no_null_genes += 1
      return
    end   
    
    if (tokens[2] != 'NaN')      
      current_matchscore = tokens[2].to_f  
      
      # Convert match_score to percentile    
      if @previous_matchscore == nil || @previous_matchscore != current_matchscore        
        @percentile = (@no_of_associations - @row_index) / @no_of_associations     
        @percentile = (@percentile*100).to_f 
      end   
      
      if @row_index % $logPrint == 0
        puts "current_matchscore = #{current_matchscore}\t percentile = #{@percentile}"
      end
      
      @previous_matchscore = current_matchscore 
      @row_index += 1  
    else              
      #puts("row #{@row_index} has no match_score skipped.") 
      return
    end   

    case @options[:subtype]
      when 'gda'
        #@base = RDF::Vocabulary.new("#{@options[:base_url]}/gene_disease_associations/")
        $baseURI = "#{@options[:base_url]}/gene_disease_associations/"
        create_gda_nanopub(concept1_id, concept2_id, @percentile)
      when 'ppa'
        #@base = RDF::Vocabulary.new("#{@options[:base_url]}/protein_protein_associations/")
        $baseURI = "#{@options[:base_url]}/protein_protein_associations/"
        create_ppi_nanopub(concept1_id, concept2_id, p_value)
      else
        throw ArgumentError.new("Subtype #{@options[:subtype]} is not supported.")
    end
  end


  protected
  def get_options
    options = Slop.parse(:help => true) do
      banner "ruby concept_profile_matching.rb [options]\n"
      on :base_url=, :default => 'http://rdf.biosemantics.org/nanopubs/cpm'
      #on :p_value_cutoff=, 'P-value cutoff, default = 0.05', :default => '0.05'
      on :subtype=, 'nanopub subtype, choose from [gda, ppa], default is gda', :default => 'gda'
    end

    super.merge(options)
  end

  protected
  def create_gda_nanopub(gene_id, disease_id, percentile)
    
    # setup nanopub
    nanopub = RDF::URI.new("#{$baseURI}#{@row_index.to_s.rjust(6, '0')}")
    assertion = RDF::URI.new("#{$baseURI}#{@row_index.to_s.rjust(6, '0')}#assertion")
    provenance = RDF::URI.new("#{$baseURI}#{@row_index.to_s.rjust(6, '0')}#provenance")
    publication_info = RDF::URI.new("#{$baseURI}#{@row_index.to_s.rjust(6, '0')}#publicationInfo")

    association = RDF::URI.new("#{$gdaResourceURI}#association_#{@row_index.to_s.rjust(6, '0')}")
    association_percentile_value = RDF::URI.new("#{$gdaResourceURI}#association_#{@row_index.to_s.rjust(6, '0')}_percentile_value")
    
    # main graph
    create_main_graph(nanopub, assertion, provenance, publication_info)

    # assertion graph    
    save(assertion, [
        [association, RDF.type, SIO['statistical-association']],
        [association, SIO['refers-to'], RDF::URI.new("http://rdf.biosemantics.org/emco/v1.5/concepts/C#{gene_id}")],
        [association, SIO['refers-to'], RDF::URI.new("http://rdf.biosemantics.org/emco/v1.5/concepts/C#{disease_id}")],
        #[association, SIO['refers-to'], RDF::URI.new("http://bio2rdf.org/omim:#{omim_id.match(/OM_(\d+)/)[1]}")],
        [association, SIO['has-measurement-value'], association_percentile_value],
        # STATO_0000293 = percentile value
        [association_percentile_value, RDF.type, STATO['STATO_0000293']],
        [association_percentile_value, SIO['has-value'], RDF::Literal.new(percentile, :datatype => XSD.float)]
    ])

    # provenance graph
    create_gda_provenance_graph(provenance, assertion)

    # publication info graph
    create_publication_info_graph(publication_info, nanopub)

    #puts "inserted nanopub <#{nanopub}>"
  end

  protected
  def create_ppi_nanopub(protein1, protein2, p_value)

    # setup nanopub
    nanopub = RDF::Vocabulary.new(@base[@row_index.to_s.rjust(6, '0')])
    assertion = nanopub['#assertion']
    provenance = nanopub['#provenance']
    publication_info = nanopub['#publicationInfo']

    # main graph
    create_main_graph(nanopub, assertion, provenance, publication_info)

    # assertion graph
    association = PPA["association_#{@row_index.to_s.rjust(6, '0')}"]
    association_p_value = PPA["association_#{@row_index.to_s.rjust(6, '0')}_p_value"]
    save(assertion, [
        [association, RDF.type, SIO['statistical-association']],
        [association, SIO['refers-to'], RDF::URI.new("http://bio2rdf.org/geneid:#{protein1}")],
        [association, SIO['refers-to'], RDF::URI.new("http://bio2rdf.org/geneid:#{protein2}")],
        [association, SIO['has-measurement-value'], association_p_value],
        [association_p_value, RDF.type, SIO['probability-value']],
        [association_p_value, SIO['has-value'], RDF::Literal.new(p_value, :datatype => XSD.float)]
    ])

    # provenance graph
    create_ppi_provenance_graph(provenance, assertion)

    # publication info graph
    create_publication_info_graph(publication_info, nanopub)

    puts "inserted nanopub <#{nanopub}>"
  end

  private
  def create_gda_provenance_graph(provenance, assertion)
    save(provenance, [
        [assertion, PROV.wasDerivedFrom, RDF::URI.new('http://rdf.biosemantics.org/vocabularies/text_mining#gene_disease_concept_profiles_1980_2014')],
        [assertion, PROV.wasGeneratedBy, RDF::URI.new('http://rdf.biosemantics.org/vocabularies/text_mining#gene_disease_concept_profiles_matching_1980_2014')]
    ])
  end

  private
  def create_ppi_provenance_graph(provenance, assertion)
    save(provenance, [
        [assertion, PROV.wasDerivedFrom, RDF::URI.new('http://rdf.biosemantics.org/vocabularies/text_mining#protein_protein_concept_profiles_1980_2014')],
        [assertion, PROV.wasGeneratedBy, RDF::URI.new('http://rdf.biosemantics.org/vocabularies/text_mining#protein_protein_concept_profiles_matching_1980_2014')]
    ])
  end

  private
  def create_publication_info_graph(publication_info, nanopub)
    save(publication_info, [
        [nanopub, DC.rights, RDF::URI.new('http://creativecommons.org/licenses/by/3.0/')],
        [nanopub, DC.rightsHolder, RDF::URI.new('http://biosemantics.org')],
        # B-6035-2012 = Schultes, Erik A
        [nanopub, PAV.authoredBy, RDF::URI.new('http://www.researcherid.com/rid/B-6035-2012')],
        # B-5927-2012 = van Haagen, Herman HHBM
        [nanopub, PAV.authoredBy, RDF::URI.new('http://www.researcherid.com/rid/B-5927-2012')],
        # E-7370-2012 = Mark Thompson
        [nanopub, PAV.createdBy, RDF::URI.new('http://www.researcherid.com/rid/E-7370-2012')],
        # J-7843-2013 = Rajaram Kaliyaperumal
        [nanopub, PAV.createdBy, RDF::URI.new('http://www.researcherid.com/rid/J-7843-2013')],
        # 0000-0002-8777-5612 = Eelke van der horst
        [nanopub, PAV.createdBy, RDF::URI.new('http://orcid.org/0000-0002-8777-5612')],
        [nanopub, DC.created, RDF::Literal.new(Time.now.utc, :datatype => XSD.dateTime)]
    ])
  end
end


# do the work
CPM_Nanopub_Converter.new.convert