# Concept profile generation and analysis for Gene-Disease paper
# Copyright (C) 2015 Biosemantics Group, Leiden University Medical Center
#  Leiden, The Netherlands
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

require 'rdf'
require 'logger'
require 'slop'
require_relative 'converter'


# Convert txt file generated by Concept Profile Matching texting mining method.
#
# Input file format:
#   concept1_id overlapping_count overlapping_concepts {in CSV}
class Homonym_Frequency_Converter < RDF_File_Converter
  
  
  # Define some useful RDF vocabularies.(Note: Define subclass RDF vocabularies here)   
  
  FOAF = RDF::FOAF
  DC = RDF::DC
  RDFS = RDF::RDFS
  XSD = RDF::XSD  
  NP = RDF::Vocabulary.new('http://www.nanopub.org/nschema#')
  BIOSEMPROP = RDF::Vocabulary.new('http://rdf.biosemantics.org/emco/properties/')
  $base = RDF::Vocabulary.new($baseURI)

  def initialize
    
    # useful stuff for serializing graph.
    prefixes = {    
    :biosemprop=> BIOSEMPROP,
    :rdf => RDF,
    :np => NP,
    nil => $base
    }

    super(RDF, NP, prefixes)
    @file_has_header = to_boolean(@options[:has_header])  
    $baseURI = "#{@options[:base_url]}/gene_disease_homonym_frequency/"
    # for statistics
    @no_null_concepts = 0
    @no_null_frequency_counts = 0
  end

  def convert_header_row(row)
    # do nothing
  end

  def convert_row(row)
    @row_index = @row_index + 1
    tokens = row.split(",")
    concept_url = tokens[0]
    frequency_count = tokens[1]
    
    if @line_number == 1 && @file_has_header
      @logger.info("row #{@row_index.to_s} is a header. skipped.")
      return
    end   
    
    if concept_url == 'null'
      @logger.info("row #{@row_index.to_s} has no concept url. skipped.")
      @no_null_frequency_counts += 1
      return
    end

    if frequency_count == 'null'
      @logger.info("row #{@row_index.to_s} has no frequency count. skipped.")
      @no_null_genes += 1
      return
    end    
    create_homonym_frequency_rdf(concept_url, frequency_count)         
  end


  protected
  def get_options
    options = Slop.parse(:help => true) do
      banner "ruby concept_profile_matching.rb [options]\n"
      on :base_url=, :default => 'http://rdf.biosemantics.org/nanopubs/cpm'
      on :has_header=, 'input file has header?', :required => true
      #on :p_value_cutoff=, 'P-value cutoff, default = 0.05', :default => '0.05'
    end

    super.merge(options)
  end

  protected
  def create_homonym_frequency_rdf(concept_url, frequency_count)
    
    # setup uri's
    concept = RDF::URI.new(concept_url)
    default_graph = RDF::URI.new($baseURI)
    save(default_graph, [        
        [concept, BIOSEMPROP['homonymFrequency'], RDF::Literal.new(frequency_count, :datatype => XSD.integer)]
        ])
  end
  
  def to_boolean(str)
     return true if str=="true"
     return false if str=="false"
     return nil
end

  
end


# do the work
Homonym_Frequency_Converter.new.convert